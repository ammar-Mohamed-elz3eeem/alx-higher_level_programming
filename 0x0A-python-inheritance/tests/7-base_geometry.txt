Test for 7-base_geometry.py
-------------------------------------------

case 0: import
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> geo = BaseGeometry()
>>>
-------------------------------------------

case 1: integer validator with value is integer
>>> geo.integer_validator("number", 15)

-------------------------------------------

case 2: integer validator with value is negative number
>>> try: 
...     geo.integer_validator("time", -15)
... except Exception as e:
...     print("[{}]: {}".format(e.__class__.__name__, e))
[ValueError]: time must be greater than 0

-------------------------------------------

case 3: integer validator with value is 0
>>> try: 
...     geo.integer_validator("time", 0)
... except Exception as e:
...     print("[{}]: {}".format(e.__class__.__name__, e))
[ValueError]: time must be greater than 0

-------------------------------------------

case 4: integer validator with value is float number
>>> try: 
...     geo.integer_validator("time", 1.2)
... except Exception as e:
...     print("[{}]: {}".format(e.__class__.__name__, e))
[TypeError]: time must be an integer

-------------------------------------------

case 5: integer validator with value is string
>>> try: 
...     geo.integer_validator("time", "int")
... except Exception as e:
...     print("[{}]: {}".format(e.__class__.__name__, e))
[TypeError]: time must be an integer

-------------------------------------------

case 6: integer validator with value is boolean
>>> try: 
...     geo.integer_validator("time", True)
... except Exception as e:
...     print("[{}]: {}".format(e.__class__.__name__, e))
[TypeError]: time must be an integer

-------------------------------------------

case 7: integer validator with only one parameter
>>> try: 
...     geo.integer_validator("time")
... except Exception as e:
...     print("[{}]: {}".format(e.__class__.__name__, e))
[TypeError]: integer_validator() missing 1 required positional argument: 'value'